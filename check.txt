📦 Installing dependencies using Poetry...
Installing dependencies from lock file

No dependencies to install or update

Installing the current project: darca-log-facility (0.1.0)
🎨 Formatting code...
Fixing /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py
Skipped 2 files
✅ Formatting complete!
🔍 Running pre-commit hooks...
check for added large files..............................................[42mPassed[m
fix end of files.........................................................[42mPassed[m
trim trailing whitespace.................................................[42mPassed[m
check yaml...............................................................[42mPassed[m
flake8...................................................................[41mFailed[m
[2m- hook id: flake8[m
[2m- exit code: 1[m

[1msrc/darca_log_facility/logger.py[m[36m:[m73[36m:[m80[36m:[m [1m[31mE501[m line too long (86 > 79 characters)
[1msrc/darca_log_facility/logger.py[m[36m:[m78[36m:[m80[36m:[m [1m[31mE501[m line too long (84 > 79 characters)
[1msrc/darca_log_facility/logger.py[m[36m:[m81[36m:[m80[36m:[m [1m[31mE501[m line too long (80 > 79 characters)
[1msrc/darca_log_facility/logger.py[m[36m:[m95[36m:[m80[36m:[m [1m[31mE501[m line too long (80 > 79 characters)
[1msrc/darca_log_facility/logger.py[m[36m:[m102[36m:[m80[36m:[m [1m[31mE501[m line too long (87 > 79 characters)
[1mtests/test_logger.py[m[36m:[m21[36m:[m80[36m:[m [1m[31mE501[m line too long (86 > 79 characters)
[1mtests/test_logger.py[m[36m:[m43[36m:[m80[36m:[m [1m[31mE501[m line too long (85 > 79 characters)
[1mtests/test_logger.py[m[36m:[m71[36m:[m80[36m:[m [1m[31mE501[m line too long (86 > 79 characters)
[1mtests/test_logger.py[m[36m:[m93[36m:[m80[36m:[m [1m[31mE501[m line too long (80 > 79 characters)
[1mtests/test_logger.py[m[36m:[m105[36m:[m80[36m:[m [1m[31mE501[m line too long (85 > 79 characters)
[1mtests/test_logger.py[m[36m:[m109[36m:[m80[36m:[m [1m[31mE501[m line too long (80 > 79 characters)
[1mtests/test_logger.py[m[36m:[m114[36m:[m80[36m:[m [1m[31mE501[m line too long (88 > 79 characters)
[1mtests/test_logger.py[m[36m:[m179[36m:[m80[36m:[m [1m[31mE501[m line too long (85 > 79 characters)

isort....................................................................[41mFailed[m
[2m- hook id: isort[m
[2m- exit code: 1[m

ERROR: /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py Imports are incorrectly sorted and/or formatted.
--- /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py:before	2025-03-15 19:40:40.395756
+++ /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py:after	2025-03-15 19:40:42.970688
@@ -6,8 +6,9 @@
 from datetime import datetime
 
 try:
-    from colorlog import \
-        ColoredFormatter  # Optional: Enhances console output readability
+    from colorlog import (
+        ColoredFormatter,  # Optional: Enhances console output readability
+    )
 
     COLORLOG_AVAILABLE = True
 except ImportError:

black....................................................................[41mFailed[m
[2m- hook id: black[m
[2m- exit code: 1[m

--- /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py	2025-03-15 19:40:40.395756+00:00
+++ /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py	2025-03-15 19:40:43.553289+00:00
@@ -4,12 +4,13 @@
 import os
 import sys
 from datetime import datetime
 
 try:
-    from colorlog import \
-        ColoredFormatter  # Optional: Enhances console output readability
+    from colorlog import (
+        ColoredFormatter,
+    )  # Optional: Enhances console output readability
 
     COLORLOG_AVAILABLE = True
 except ImportError:
     COLORLOG_AVAILABLE = False
 
@@ -68,19 +69,25 @@
                 "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
             )
         )
 
         if log_to_file:
-            self._setup_file_logging(name, log_directory, max_file_size, backup_count)
+            self._setup_file_logging(
+                name, log_directory, max_file_size, backup_count
+            )
 
         if log_to_console:
             self._setup_console_logging(colored_console)
 
-    def _setup_file_logging(self, name, log_directory, max_file_size, backup_count):
+    def _setup_file_logging(
+        self, name, log_directory, max_file_size, backup_count
+    ):
         """Setup file logging with rotation."""
         if not os.path.exists(log_directory):
-            os.makedirs(log_directory, exist_ok=True)  # Ensure directory exists
+            os.makedirs(
+                log_directory, exist_ok=True
+            )  # Ensure directory exists
 
         log_file_path = os.path.join(log_directory, f"{name}.log")
 
         file_handler = logging.handlers.RotatingFileHandler(
             log_file_path,
@@ -90,18 +97,21 @@
         )
         file_handler.setFormatter(self.formatter)
         self.logger.addHandler(file_handler)
 
         # Debugging log to check if file is created
-        self.logger.info(f"Logger initialized. Writing logs to {log_file_path}")
+        self.logger.info(
+            f"Logger initialized. Writing logs to {log_file_path}"
+        )
 
     def _setup_console_logging(self, colored_console):
         """Setup console logging with optional color support."""
         console_handler = logging.StreamHandler(sys.stdout)
         if colored_console and COLORLOG_AVAILABLE:
             console_formatter = ColoredFormatter(
-                "%(log_color)s%(asctime)s - %(name)s - " "%(levelname)s - %(message)s",
+                "%(log_color)s%(asctime)s - %(name)s - "
+                "%(levelname)s - %(message)s",
                 log_colors={
                     "DEBUG": "cyan",
                     "INFO": "green",
                     "WARNING": "yellow",
                     "ERROR": "red",
--- src/darca_log_facility/logger.py	2025-03-15 19:40:40.395756+00:00
+++ src/darca_log_facility/logger.py	2025-03-15 19:40:43.553727+00:00
@@ -4,12 +4,13 @@
 import os
 import sys
 from datetime import datetime
 
 try:
-    from colorlog import \
-        ColoredFormatter  # Optional: Enhances console output readability
+    from colorlog import (
+        ColoredFormatter,
+    )  # Optional: Enhances console output readability
 
     COLORLOG_AVAILABLE = True
 except ImportError:
     COLORLOG_AVAILABLE = False
 
@@ -68,19 +69,25 @@
                 "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
             )
         )
 
         if log_to_file:
-            self._setup_file_logging(name, log_directory, max_file_size, backup_count)
+            self._setup_file_logging(
+                name, log_directory, max_file_size, backup_count
+            )
 
         if log_to_console:
             self._setup_console_logging(colored_console)
 
-    def _setup_file_logging(self, name, log_directory, max_file_size, backup_count):
+    def _setup_file_logging(
+        self, name, log_directory, max_file_size, backup_count
+    ):
         """Setup file logging with rotation."""
         if not os.path.exists(log_directory):
-            os.makedirs(log_directory, exist_ok=True)  # Ensure directory exists
+            os.makedirs(
+                log_directory, exist_ok=True
+            )  # Ensure directory exists
 
         log_file_path = os.path.join(log_directory, f"{name}.log")
 
         file_handler = logging.handlers.RotatingFileHandler(
             log_file_path,
@@ -90,18 +97,21 @@
         )
         file_handler.setFormatter(self.formatter)
         self.logger.addHandler(file_handler)
 
         # Debugging log to check if file is created
-        self.logger.info(f"Logger initialized. Writing logs to {log_file_path}")
+        self.logger.info(
+            f"Logger initialized. Writing logs to {log_file_path}"
+        )
 
     def _setup_console_logging(self, colored_console):
         """Setup console logging with optional color support."""
         console_handler = logging.StreamHandler(sys.stdout)
         if colored_console and COLORLOG_AVAILABLE:
             console_formatter = ColoredFormatter(
-                "%(log_color)s%(asctime)s - %(name)s - " "%(levelname)s - %(message)s",
+                "%(log_color)s%(asctime)s - %(name)s - "
+                "%(levelname)s - %(message)s",
                 log_colors={
                     "DEBUG": "cyan",
                     "INFO": "green",
                     "WARNING": "yellow",
                     "ERROR": "red",
[1mwould reformat /mnt/home/rokist/Projects/Python/darca-log-facility/src/darca_log_facility/logger.py[0m
[1mwould reformat src/darca_log_facility/logger.py[0m
--- tests/test_logger.py	2025-03-15 18:02:38.548112+00:00
+++ tests/test_logger.py	2025-03-15 19:40:43.588104+00:00
@@ -16,11 +16,13 @@
 
 
 def test_logger_creation(logger_instance, request):
     """Ensure DarcaLogger initializes correctly."""
     logger = logger_instance.get_logger()
-    expected_logger_name = request.node.name  # Logger name should match the test name
+    expected_logger_name = (
+        request.node.name
+    )  # Logger name should match the test name
     assert (
         logger.name == expected_logger_name
     ), f"Expected logger name '{expected_logger_name}', got '{logger.name}'"
 
 
@@ -38,11 +40,13 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file does not exist: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file does not exist: {log_file_path}"
 
     rotated_file_path = os.path.join(temp_log_dir, "test_log_rotation.log.2")
     if os.path.exists(rotated_file_path):
         with open(rotated_file_path, "r", encoding="utf-8") as f:
             rotated_content = f.read()
@@ -66,11 +70,13 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file was not created: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file was not created: {log_file_path}"
 
     with open(log_file_path, "r", encoding="utf-8") as f:
         log_content = f.read()
 
     assert "Test log message" in log_content, "Log message not written to file"
@@ -88,11 +94,13 @@
 
     log_file_path = os.path.join(temp_log_dir, f"{log_name}.log")
 
     # Generate logs to exceed the file size and trigger rotation
     for _ in range(100):  # More iterations to ensure rotation triggers
-        logger.info("This is a long log message to exceed the file size limit.")
+        logger.info(
+            "This is a long log message to exceed the file size limit."
+        )
 
     # Ensure all logs are flushed to file
     for handler in logger.handlers:
         handler.flush()
 
@@ -100,20 +108,26 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file does not exist: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file does not exist: {log_file_path}"
 
     # Check that rotated log files exist
     rotated_files = [f for f in os.listdir(temp_log_dir) if log_name in f]
-    assert len(rotated_files) > 1, f"Log rotation did not happen for {log_name}"
+    assert (
+        len(rotated_files) > 1
+    ), f"Log rotation did not happen for {log_name}"
 
     # Verify specific rotated files exist
     for i in range(1, 3):  # Checking for .1 and .2 rotated files
         rotated_file = os.path.join(temp_log_dir, f"{log_name}.log.{i}")
-        assert os.path.exists(rotated_file), f"Rotated log file missing: {rotated_file}"
+        assert os.path.exists(
+            rotated_file
+        ), f"Rotated log file missing: {rotated_file}"
 
 
 def test_json_logging(temp_log_dir, request):
     """Verify JSON log format is correctly applied."""
     log_name = request.node.name  # Unique log file name
@@ -174,11 +188,13 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file does not exist: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file does not exist: {log_file_path}"
 
     with open(log_file_path, "r", encoding="utf-8") as f:
         log_content = f.read()
 
     assert "Error log message" in log_content, "Log message missing in file"
[1mwould reformat tests/test_logger.py[0m
--- /mnt/home/rokist/Projects/Python/darca-log-facility/tests/test_logger.py	2025-03-15 18:02:38.548112+00:00
+++ /mnt/home/rokist/Projects/Python/darca-log-facility/tests/test_logger.py	2025-03-15 19:40:43.588914+00:00
@@ -16,11 +16,13 @@
 
 
 def test_logger_creation(logger_instance, request):
     """Ensure DarcaLogger initializes correctly."""
     logger = logger_instance.get_logger()
-    expected_logger_name = request.node.name  # Logger name should match the test name
+    expected_logger_name = (
+        request.node.name
+    )  # Logger name should match the test name
     assert (
         logger.name == expected_logger_name
     ), f"Expected logger name '{expected_logger_name}', got '{logger.name}'"
 
 
@@ -38,11 +40,13 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file does not exist: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file does not exist: {log_file_path}"
 
     rotated_file_path = os.path.join(temp_log_dir, "test_log_rotation.log.2")
     if os.path.exists(rotated_file_path):
         with open(rotated_file_path, "r", encoding="utf-8") as f:
             rotated_content = f.read()
@@ -66,11 +70,13 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file was not created: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file was not created: {log_file_path}"
 
     with open(log_file_path, "r", encoding="utf-8") as f:
         log_content = f.read()
 
     assert "Test log message" in log_content, "Log message not written to file"
@@ -88,11 +94,13 @@
 
     log_file_path = os.path.join(temp_log_dir, f"{log_name}.log")
 
     # Generate logs to exceed the file size and trigger rotation
     for _ in range(100):  # More iterations to ensure rotation triggers
-        logger.info("This is a long log message to exceed the file size limit.")
+        logger.info(
+            "This is a long log message to exceed the file size limit."
+        )
 
     # Ensure all logs are flushed to file
     for handler in logger.handlers:
         handler.flush()
 
@@ -100,20 +108,26 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file does not exist: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file does not exist: {log_file_path}"
 
     # Check that rotated log files exist
     rotated_files = [f for f in os.listdir(temp_log_dir) if log_name in f]
-    assert len(rotated_files) > 1, f"Log rotation did not happen for {log_name}"
+    assert (
+        len(rotated_files) > 1
+    ), f"Log rotation did not happen for {log_name}"
 
     # Verify specific rotated files exist
     for i in range(1, 3):  # Checking for .1 and .2 rotated files
         rotated_file = os.path.join(temp_log_dir, f"{log_name}.log.{i}")
-        assert os.path.exists(rotated_file), f"Rotated log file missing: {rotated_file}"
+        assert os.path.exists(
+            rotated_file
+        ), f"Rotated log file missing: {rotated_file}"
 
 
 def test_json_logging(temp_log_dir, request):
     """Verify JSON log format is correctly applied."""
     log_name = request.node.name  # Unique log file name
@@ -174,11 +188,13 @@
     for _ in range(10):
         if os.path.exists(log_file_path):
             break
         time.sleep(0.1)
 
-    assert os.path.exists(log_file_path), f"Log file does not exist: {log_file_path}"
+    assert os.path.exists(
+        log_file_path
+    ), f"Log file does not exist: {log_file_path}"
 
     with open(log_file_path, "r", encoding="utf-8") as f:
         log_content = f.read()
 
     assert "Error log message" in log_content, "Log message missing in file"
[1mwould reformat /mnt/home/rokist/Projects/Python/darca-log-facility/tests/test_logger.py[0m

[1mOh no! 💥 💔 💥[0m
[34m[1m4 files [0m[1mwould be reformatted[0m, [34m4 files [0mwould be left unchanged.

bandit...................................................................[42mPassed[m
